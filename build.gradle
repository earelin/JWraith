apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'application'
apply plugin: 'jacoco'

ext.seleniumVersion = '3.4.0'

sourceCompatibility = 1.8
version = '0.1'

compileJava.options*.compilerArgs = [
	"-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
	"-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
	"-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
	"-Xlint:try", "-Xlint:fallthrough", "-Xlint:rawtypes", "-Xlint:deprecation",
	"-Xlint:unchecked", "-Xlint:-options"]

compileTestJava.options*.compilerArgs = [
	"-Xlint:serial", "-Xlint:-varargs", "-Xlint:cast", "-Xlint:classfile",
	"-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
	"-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
	"-Xlint:try", "-Xlint:-fallthrough", "-Xlint:-rawtypes", "-Xlint:-deprecation",
	"-Xlint:-unchecked", "-Xlint:-options"]

mainClassName = "com.ubm.jwraith.JWraith"

jar {
  baseName = 'jwraith'
  manifest {
    attributes 'Main-Class': 'com.ubm.jwraith.JWraith'
  }
  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    
  }
}

repositories {
  mavenCentral()
  maven {
    url "https://jitpack.io"
  }
}

dependencies {  
  compile 'org.slf4j:slf4j-api:1.7.25'
  compile 'org.slf4j:slf4j-simple:1.7.25'
  
  compile 'com.esotericsoftware.yamlbeans:yamlbeans:1.11'
  
  compile "org.seleniumhq.selenium:selenium-server:${seleniumVersion}"
  compile "org.seleniumhq.selenium:selenium-firefox-driver:${seleniumVersion}"
  compile "org.seleniumhq.selenium:selenium-chrome-driver:${seleniumVersion}"
  compile 'com.github.detro:ghostdriver:2.0.0'
  
  compile 'org.apache.commons:commons-io:1.3.2'
  
  compile 'org.thymeleaf:thymeleaf:3.0.6.RELEASE'
  
  // Testing
  testCompile 'junit:junit:4.+'
  testCompile 'org.mockito:mockito-core:1.+'
  testCompile 'org.hamcrest:hamcrest-all:1.3'
}

//check.dependsOn testUI

jacocoTestReport {
  reports {
    xml.enabled = true
    html.enabled = true
  }
}

check.dependsOn jacocoTestReport

tasks.withType(FindBugs) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

findbugs {
  effort = 'max'
  ignoreFailures = true
  reportLevel = 'low'
}

run {
  if (project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}
